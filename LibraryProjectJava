WİNG kütüphanesi kullanarak bir Kütüphane Yönetim Sistemi projesi:

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class LibraryManagementApp extends JFrame {
    private List<Book> bookList;
    private JTextField titleField;
    private JTextField authorField;
    private JButton addButton;
    private JTextArea bookListArea;

    public LibraryManagementApp() {
        setTitle("Kütüphane Yönetim Sistemi");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 300);
        setLayout(new FlowLayout());

        bookList = new ArrayList<>();

        JLabel titleLabel = new JLabel("Kitap Adı:");
        titleField = new JTextField(15);

        JLabel authorLabel = new JLabel("Yazar:");
        authorField = new JTextField(15);

        addButton = new JButton("Kitap Ekle");
        addButton.addActionListener(new AddButtonListener());

        bookListArea = new JTextArea(10, 30);
        bookListArea.setEditable(false);

        add(titleLabel);
        add(titleField);
        add(authorLabel);
        add(authorField);
        add(addButton);
        add(bookListArea);

        setVisible(true);
    }

    private class AddButtonListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String title = titleField.getText();
            String author = authorField.getText();

            Book book = new Book(title, author);
            bookList.add(book);

            bookListArea.setText("");
            for (Book b : bookList) {
                bookListArea.append(b.toString() + "\n");
            }

            titleField.setText("");
            authorField.setText("");
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new LibraryManagementApp();
            }
        });
    }
}

class Book {
    private String title;
    private String author;

    public Book(String title, String author) {
        this.title = title;
        this.author = author;
    }

    @Override
    public String toString() {
        return "Kitap Adı: " + title + ", Yazar: " + author;
    }
}



Bu kodlarda, "LibraryManagementApp" adında ana uygulama sınıfı ve "Book" adında bir sınıf oluşturuldu. Ana uygulama sınıfı "JFrame" sınıfını miras alır ve kütüphane yönetim sistemi için bir form uygulamasıdır.

"LibraryManagementApp" sınıfında, kullanıcı arayüzü elemanları (JTextField, JButton, JTextArea) ve bu elemanların olay dinleyicisi yer alır. Kullanıcı kitap adı ve yazarını girebilir, 
"Kitap Ekle" butonuna tıkladığında girdiği bilgilerle bir "Book" nesnesi oluşturulur ve "bookList" listesine eklenir. Ardından, "bookListArea" alanına eklenen kitapların listesi görüntülenir.


// Book sınıfı devamı

    // Getter ve setter metotları buraya eklenebilir

    // Diğer sınıflardan erişim için gerekli metotlar

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }
}

Bu şekilde, Book sınıfına getter metotları ekleyerek title ve author özelliklerine erişim sağlayabiliriz.

Bu projede, kullanıcı arayüzüne kitap adı ve yazarı girebileceğimiz alanlar ekledik. Ardından, 
"Kitap Ekle" butonuna tıklandığında bu girdileri kullanarak Book nesneleri oluşturuyoruz. Oluşturulan her bir Book nesnesini
bookList adlı bir liste içinde saklıyoruz. Listeye her eleman eklediğimizde, bookListArea adlı metin alanına liste güncellenmiş kitapları ekliyoruz.

Bu örnekte, LibraryManagementApp sınıfı ana uygulama sınıfını temsil ediyor ve kullanıcı arayüzünü oluşturuyor. 
Book sınıfı ise kitapların temsil edildiği bir sınıftır. Her bir kitabın title ve author adlı özelliklere sahip olduğunu ve bir toString() metodu kullanarak kitap bilgilerini döndürdüğünü görüyoruz.

bazı nesnesel tasarım prensipleri ve bu projede nasıl uygulandığına dair açıklamalar:

Sınıf ve Nesne: Book sınıfı, kitapların temsil edildiği bir sınıftır. Her kitap bir nesne olarak modellemek için bu sınıfı kullanırız.

Miras (Kalıtım): Bu projede miras alınması gereken bir sınıf zorunluluğu olduğu belirtilmediği için miras kullanılmamıştır.
Ancak, genel olarak nesnesel tasarımda miras kullanarak bir sınıfın diğer sınıflardan özelliklerini ve davranışlarını devralabiliriz.

Yapılandırıcılar: Book sınıfında bir yapılandırıcı (constructor) tanımlanmıştır. Yapılandırıcı, bir Book nesnesi oluşturulurken kullanılacak başlangıç değerlerini alır.
Bu sayede, Book nesnesi oluşturulurken gerekli parametreler sağlanır ve sınıfın doğru bir şekilde başlatılması sağlanır.

Kapsülleme: Book sınıfındaki title ve author özellikleri private olarak tanımlanmıştır. Bu sayede, bu özelliklere doğrudan erişim engellenir ve kontrol edilmesi sağlanır. Özelliklere erişmek için getter ve setter metotları kullanılır.

Tek Sorumluluk İlkesi: Book sınıfı yalnızca bir kitabın bilgilerini tutar ve bu bilgileri döndürmek için gerekli metotları sağlar. Bu sayede her sınıfın yalnızca bir sorumluluğu olduğu ilkesine uyulmuş olur.

Bu prensipler, nesnesel tasarımın temel yapı taşlarını oluşturur ve kodun daha anlaşılır, esnek ve sürdürülebilir olmasını sağlar. Bu projede, bu prensipleri uygulamak için sınıfların oluşturulması, 
özelliklerin gizlenmesi ve metotların anlamlı görevler üzerinde çalışması sağlanmıştır.

Bu projede, nesnesel tasarım prensiplerine uygun olarak sınıfları ve özellikleri tanımladık. Ayrıca, private erişim belirleyicisini kullanarak değişkenlerin erişimini kontrol ettik. Projenin geri kalanı, kullanıcı arayüzünün oluşturulması 
ve kullanıcının girdiğini işlemek için Swing kütüphanesini kullandık.
